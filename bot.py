import requests, re
from bs4 import BeautifulSoup
import os, json, time

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –í–ê–†–ò–ê–ù–¢: –±–µ—Ä—ë–º –∏–∑ Secrets (–¥–æ–±–∞–≤–∏—à—å –Ω–∞ —à–∞–≥–µ 4)
TOKEN = os.environ["TELEGRAM_TOKEN"]
CHAT_ID = os.environ["CHAT_ID"]
URLS = os.environ.get("URLS","").split()  # —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

# –ï–°–õ–ò –•–û–ß–ï–®–¨ –ü–†–û–°–¢–û –ü–†–û–í–ï–†–ò–¢–¨ (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û): —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ –∏ –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
# TOKEN = "123456:ABC..."      # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
# CHAT_ID = "123456789"        # —Ç–≤–æ–π chat_id –æ—Ç @userinfobot
# URLS = ["https://www.dns-shop.ru/product/i1000779/"]  # –º–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫

STATE = "last.json"  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—Ä–æ—à–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω

def send(msg):
    requests.post(
        f"https://api.telegram.org/bot{TOKEN}/sendMessage",
        json={"chat_id": CHAT_ID, "text": msg, "disable_web_page_preview": True},
        timeout=20
    )

def price_from_html(html):
    soup = BeautifulSoup(html, "html.parser")
    # 1) meta itemprop=price
    meta = soup.find("meta", {"itemprop": "price"})
    if meta and meta.get("content"):
        try: return float(str(meta["content"]).replace(",", "."))
        except: pass
    # 2) JSON-LD offers.price
    for tag in soup.find_all("script", {"type":"application/ld+json"}):
        try:
            data = json.loads(tag.string or "{}")
            items = data if isinstance(data, list) else [data]
            for obj in items:
                offers = isinstance(obj, dict) and obj.get("offers")
                if isinstance(offers, dict):
                    p = offers.get("price") or offers.get("lowPrice") or offers.get("highPrice")
                    if p: return float(str(p).replace(",", "."))
        except: pass
    # 3) —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    txt = soup.get_text(" ", strip=True)
    m = re.search(r"(\d[\d\s.,]{2,})\s?(‚ÇΩ|—Ä—É–±|KZT|‚Ç∏|RUB|BYN)", txt, re.I)
    if m:
        num = m.group(1).replace("\xa0","").replace(" ","").replace(",", ".")
        try: return float(num)
        except: pass
    return None

def fetch(url):
    r = requests.get(url, headers={"User-Agent":"Mozilla/5.0"}, timeout=30)
    r.raise_for_status()
    return price_from_html(r.text)

def load_state():
    if os.path.exists(STATE):
        return json.load(open(STATE,"r",encoding="utf-8"))
    return {}

def save_state(s):
    json.dump(s, open(STATE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)

def main():
    st = load_state()
    msgs = []
    targets = URLS if isinstance(URLS, list) else URLS  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å—Ç—Ä–æ–∫–∏, –∏ —Å–ø–∏—Å–∫–∞
    for url in targets:
        try:
            price = fetch(url)
        except Exception as e:
            msgs.append(f"‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É:\n{url}\n{e}")
            continue
        if price is None:
            msgs.append(f"‚ùì –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:\n{url}")
            continue
        prev = st.get(url, {}).get("price")
        st[url] = {"price": price, "ts": int(time.time())}
        if prev is None:
            msgs.append(f"üÜï –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}\n{url}")
        elif price != prev:
            arrow = "‚¨áÔ∏è" if price < prev else "‚¨ÜÔ∏è"
            msgs.append(f"{arrow} –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: –±—ã–ª–∞ {prev}, —Å—Ç–∞–ª–∞ {price}\n{url}")
        # –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –º–æ–ª—á–∏–º
    save_state(st)
    if msgs:
        send("\n\n".join(msgs))

if __name__ == "__main__":
    main()
