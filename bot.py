import requests, re
from bs4 import BeautifulSoup
import os, json, time

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –í–ê–†–ò–ê–ù–¢: –±–µ—Ä—ë–º –∏–∑ Secrets (–¥–æ–±–∞–≤–∏—à—å –Ω–∞ —à–∞–≥–µ 4)
TOKEN = os.environ["TELEGRAM_TOKEN"]
CHAT_ID = os.environ["CHAT_ID"]
URLS = os.environ.get("URLS","").split()  # —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

# –ï–°–õ–ò –•–û–ß–ï–®–¨ –ü–†–û–°–¢–û –ü–†–û–í–ï–†–ò–¢–¨ (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û): —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ –∏ –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
# TOKEN = "123456:ABC..."      # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
# CHAT_ID = "123456789"        # —Ç–≤–æ–π chat_id –æ—Ç @userinfobot
# URLS = ["https://www.dns-shop.ru/product/i1000779/"]  # –º–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫

STATE = "last.json"  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—Ä–æ—à–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω

def send(msg):
    requests.post(
        f"https://api.telegram.org/bot{TOKEN}/sendMessage",
        json={"chat_id": CHAT_ID, "text": msg, "disable_web_page_preview": True},
        timeout=20
    )

def price_from_html(html):
    import json, re
    from bs4 import BeautifulSoup
    soup = BeautifulSoup(html, "html.parser")

    # 1) <meta itemprop="price" content="...">
    meta = soup.find("meta", {"itemprop": "price"})
    if meta and meta.get("content"):
        try:
            return float(str(meta["content"]).replace(",", "."))
        except:
            pass

    # 2) JSON-LD —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π offers / price
    for tag in soup.find_all("script", {"type": "application/ld+json"}):
        try:
            data = json.loads(tag.string or "{}")
            items = data if isinstance(data, list) else [data]
            for obj in items:
                if not isinstance(obj, dict):
                    continue
                # –í–ª–æ–∂–µ–Ω–Ω—ã–µ offers –º–æ–≥—É—Ç –±—ã—Ç—å dict –∏–ª–∏ list
                offers = obj.get("offers")
                if isinstance(offers, dict):
                    p = offers.get("price") or offers.get("lowPrice") or offers.get("highPrice")
                    if p:
                        return float(str(p).replace(",", "."))
                elif isinstance(offers, list):
                    for off in offers:
                        if isinstance(off, dict):
                            p = off.get("price") or off.get("lowPrice") or off.get("highPrice")
                            if p:
                                return float(str(p).replace(",", "."))
        except:
            continue

    # 3) –Ø–≤–Ω—ã–π –±–ª–æ–∫ —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—á–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç .product-buy__price)
    block = soup.select_one(".product-buy__price, .product-card-top__buy .price__current, .price__current")
    if block:
        txt = block.get_text(" ", strip=True)
        m = re.search(r"(\d[\d\s.,]{2,})", txt)
        if m:
            num = m.group(1).replace("\xa0", "").replace(" ", "").replace(",", ".")
            try:
                return float(num)
            except:
                pass

    # 4) –§–æ–ª–ª–±—ç–∫: –∏—â–µ–º —á–∏—Å–ª–æ —Ä—è–¥–æ–º —Å–æ —Å–ª–æ–≤–∞–º–∏ –ø—Ä–æ —Ü–µ–Ω—É –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
    txt = soup.get_text(" ", strip=True)
    m = re.search(r"(?:–¶–µ–Ω–∞|–°—Ç–æ–∏–º–æ—Å—Ç—å|–∑–∞)\D{0,15}(\d[\d\s.,]{2,})\s?(‚ÇΩ|—Ä—É–±|KZT|‚Ç∏|RUB|BYN)?", txt, re.I)
    if m:
        num = m.group(1).replace("\xa0", "").replace(" ", "").replace(",", ".")
        try:
            return float(num)
        except:
            pass

    return None


def fetch(url):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π Chromium –∏ –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ü–µ–Ω–∞
    from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        ctx = browser.new_context(
            locale="ru-RU",
            user_agent=("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                        "AppleWebKit/537.36 (KHTML, like Gecko) "
                        "Chrome/126.0.0.0 Safari/537.36")
        )
        page = ctx.new_page()
        # –ø—Ä–æ–≥—Ä–µ–≤ ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –≥–æ—Ä–æ–¥–∞
        page.goto("https://www.dns-shop.ru/", wait_until="domcontentloaded", timeout=60000)
        page.wait_for_timeout(700)  # –º–∞–ª–µ–Ω—å–∫–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞
        # –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
        page.goto(url, wait_until="domcontentloaded", timeout=60000)

        # –∂–¥—ë–º —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ –∏–∑ —Ç—Ä—ë—Ö: meta price / –±–ª–æ–∫ —Ü–µ–Ω—ã / JSON-LD
        try:
            page.wait_for_selector('meta[itemprop="price"], .product-buy__price, script[type="application/ld+json"]', timeout=15000)
        except PWTimeout:
            pass  # –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–±–µ—Ä—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –≤–¥—Ä—É–≥ —Ü–µ–Ω–∞ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ

        html = page.content()
        browser.close()
    return price_from_html(html)




def load_state():
    if os.path.exists(STATE):
        return json.load(open(STATE,"r",encoding="utf-8"))
    return {}

def save_state(s):
    json.dump(s, open(STATE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)

def main():
    st = load_state()
    msgs = []
    targets = URLS if isinstance(URLS, list) else URLS  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å—Ç—Ä–æ–∫–∏, –∏ —Å–ø–∏—Å–∫–∞
    for url in targets:
        try:
            price = fetch(url)
        except Exception as e:
            msgs.append(f"‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É:\n{url}\n{e}")
            continue
        if price is None:
            msgs.append(f"‚ùì –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:\n{url}")
            continue
        prev = st.get(url, {}).get("price")
        st[url] = {"price": price, "ts": int(time.time())}
        if prev is None:
            msgs.append(f"üÜï –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}\n{url}")
        elif price != prev:
            arrow = "‚¨áÔ∏è" if price < prev else "‚¨ÜÔ∏è"
            msgs.append(f"{arrow} –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: –±—ã–ª–∞ {prev}, —Å—Ç–∞–ª–∞ {price}\n{url}")
        # –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –º–æ–ª—á–∏–º
    save_state(st)
    if msgs:
        send("\n\n".join(msgs))

if __name__ == "__main__":
    main()
